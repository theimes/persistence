# A Docker Compose must always start with the version tag.
# We use '3' because it's the last version.
version: '3'

# You should know that Docker Compose works with services.
# 1 service = 1 container.
# For example, a service, a server, a client, a database...
# We use the keyword 'services' to start to create services.
services:
  # The name of our service is "database"
  # but you can use the name of your choice.
  # Note: This may change the commands you are going to use a little bit.
  database:
    # Official Postgres image from DockerHub (we use the last version)
    image: 'postgres:latest'

    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5432:5432

    #networks:
    #  - "persistence-network"

    environment:
      POSTGRES_USER: demo # The PostgreSQL user (useful to connect to the database)
      POSTGRES_PASSWORD: demo # The PostgreSQL password (useful to connect to the database)
      POSTGRES_DB: demo # The PostgreSQL default database (automatically created at first launch)

    volumes:
      # In this example, we share the folder `db-data` in our root repository, with the default PostgreSQL data path.
      # It means that every time the repository is modifying the data inside
      # of `/var/lib/postgresql/data/`, automatically the change will appear in `db-data`.
      # You don't need to create the `db-data` folder. Docker Compose will do it for you.
      - ./db-data/:/var/lib/postgresql/data/

  mongodb:
    image: 'mongodb/mongodb-community-server:latest'
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: demo
    volumes:
      - ./mongodb-data/:/data/db/

  cassandra:
    image: 'cassandra:latest'
    ports:
      - 9042:9042
    environment:
      - CASSANDRA_CLUSTER_NAME=demo
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    volumes:
      - ./cassandra-data/:/var/lib/cassandra/data/
#    networks: 
#      - "persistence-network"

#networks:
#  persistence-network:
#    driver: bridge

